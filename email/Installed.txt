BREW LEAVES
allure
cloc
coreutils
cowsay
git-quick-stats
graphviz
httpie
maven
nvm
pkg-config
ruby
sphinx-doc
terraform
tree
yarn

BREW CASK LIST
gimp
java6
spotify
spotify-notifications

APPS
Spotify
IntelliJ
WebStorm
DataGrip
PyCharm
SQLDeveloper
Robo3T
Sublime Text (plugins) (subl command)
iTerm2
Chrome
Mattermost
Slack
Adobe Acrobat Reader
Word/Excel/Powerpoint
xCode
Docker
Jetbrains Toolbox
Clocker
Flycut
The Unarchiver
AppCleaner
OmniDiskSweeper
Firefox
BetterTouchTool
Alfred 3
Marta
VSCode (plugins)
Pages/Keynote/Numbers

https://github.com/zimfw/zimfw ???
https://www.terriblecode.com/blog/zplug-from-a-former-oh-my-zsh-user/
terminalsare.sexy

zooinspector

Chrome extenstions:
Adblock
EditThisCookie
Google Translate
JSONView (or better)
Keepa
React Developer Tools
Redux DevTools
Requestly
Wappalyzer (or similar)

IntelliJ Plugins:
.ignore (2.6.2)
AspectJ Support (1.2)
Builder Generator (1.1.7)
Bytecode Viewer (0.1)
CFML Support (3.53)
Copyright (8.1)
Coverage (182.5107.16)
CSS Support (182.5107.16)
CSV Plugin (1.6.1)
Cucumber for Groovy (182.5107.16)
Cucumber for Java (182.5107.16)
Database Tools and SQL (182.5107.16)
DSM Analysis (1.0.0)
Eclipse Integration (3.0)
EditorConfig (182.5107.16)
Emma (182.5107.16)
Flash/Flex Support (182.5107.16)
Gherkin (999.999)
Git Integration (8.1)
GitHub (182.5107.16)
Go To Project (1.2)
Grep Console (8.1.162.000.0)
Groovy (9.0)
Guice (8.0)
HashiCorp Terraform / HCL language support (0.6.12)
Hibernate Support (1.0)
HTML Tools (2.0)
HTTP Client (182.5107.16)
I18n for Java (182.5107.16)
IDE Settings Sync (182.5107.16)
IntelliLang (8.0)
J2ME (1.0)
Java Bytecode Decompiler (182.5107.16)
Java EE: Batch Applications (1.0)
Java EE: Bean Validation Support (1.1)
Java EE: Contexts and Dependency Injection (1.1)
Java EE: EJB, JPA, Servlets (1.0)
Java EE: Java Server Faces (2.2.X.)
Java EE: JMS, JSON Processing, Concurrency, Transaction  (1.0)
Java EE: RESTful Web Services (JAX-RS) (1.0)
Java EE: WebSockets (1.0)
Java Server Pages (JSP) Integration (1.0)
Java Stream Debugger (182.5107.16)
JavaFX (1.0)
JavaScript Debugger (1.0)
JavaScript Intention Power Pack (0.9.4)
JavaScript Support (1.0)
JUnit (1.0)
Kotlin (1.2.51-release-IJ2018.2-1)
Less support (182.5107.16)
Lombok Plugin (0.22.2018.2)
Markdown support (182.5107.16)
Maven Integration (182.5107.16)
Maven Integration Extension (182.5107.16)
Persistence Frameworks Support (1.0)
PlantUML integration (2.10.1)
Playframework Support (1.0)
Plugin DevKit (1.0)
Properties Support (182.5107.16)
Properties to YAML Converter (1.0.2)
Reactor framework support (1.0)
Refactor-X (2.01)
Remote Hosts Access (0.1)
Sass support (182.5107.16)
Scala (2018.2.11)
Settings Repository (182.5107.16)
Smali Support (1.0)
Spring AOP/@AspectJ (1.0)
Spring Assistant (0.12.0)
Spring Batch (1.0)
Spring Boot (1.0)
Spring Data (1.0)
Spring Integration Patterns (1.0)
Spring OSGi (1.0)
Spring Security (1.0)
Spring Support (1.0)
Spring Web Flow (1.0)
Spring Web Services (1.0)
Spy-js (182.5107.16)
SSH Remote Run (0.1)
Subversion Integration (1.1)
Task Management (1.0)
Terminal (0.1)
Time Tracking (1.0)
tslint (182.5107.16)
UML Support (1.0)
W3C Validators (2.0)
XPathView + XSLT Support (4)
XSLT-Debugger (1.4)
YAML (182.5107.16)
ZKM-Unscramble (1.0)

Webstorm Plugins
AngularJS (182.5107.19)
ASP (0.1)
Atom File Icons IDEA (3.0)
BashSupport (1.7.3)
CoffeeScript (182.5107.19)
Copyright (8.1)
CSS Support (182.5107.19)
Cucumber.js (0.1)
Dart (182.5107.19)
Docker integration (182.5107.19)
EditorConfig (182.5107.19)
EJS (182.5107.19)
File Watchers (182.5107.19)
Gherkin (999.999)
Git Integration (8.1)
GitHub (182.5107.19)
Haml (182.5107.19)
Handlebars/Mustache (182.5107.19)
HashiCorp Terraform / HCL language support (0.6.12)
HTML Tools (2.0)
HTTP Client (182.5107.19)
IDE Settings Sync (182.5107.19)
IntelliLang (8.0)
Java Server Pages (JSP) Integration (1.0)
JavaScript Debugger (1.0)
JavaScript Intention Power Pack (0.9.4)
JavaScript Support (1.0)
Karma (182.5107.19)
Less support (182.5107.19)
LiveEdit (182.5107.19)
Markdown Navigator (2.5.4)
Mercurial Integration (10.0)
Meteor (182.5107.19)
Node.js Remote Interpreter (182.5107.19)
NodeJS (182.5107.19)
Performance Testing (182.5107.19)
PhoneGap/Cordova Plugin (182.5107.19)
Polymer & Web Components (999.999)
Power Mode II (3.15)
Prettier (182.5107.19)
Pug (ex-Jade) (182.5107.19)
Refactor-X (2.01)
Remote Hosts Access (0.1)
Sass support (182.5107.19)
Settings Repository (182.5107.19)
Spy-js (182.5107.19)
SSH Remote Run (0.1)
Stylus support (999.999)
Subversion Integration (1.1)
Task Management (1.0)
Terminal (0.1)
TextMate bundles support (182.5107.19)
Time Tracking (1.0)
tslint (182.5107.19)
UML Support (1.0)
Vagrant (182.5107.19)
Vue.js (182.5107.19)
W3C Validators (2.0)
XPathView + XSLT Support (4)
YAML (182.5107.19)
Yeoman (182.5107.19)

aws-cli
apache
host file:
##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1	localhost
255.255.255.255	broadcasthost
::1             localhost
127.0.0.1	localhost.ig.com
127.0.0.1	local.ig.com


cowsay (and extras)
cowthink
git
svn
http
java 6 to 12 (something to simplify this)
mvn 2 & 3
latest python and 2
pip for 2 & 3
python env
ssh keys
yarn
npm
nvm
node


https://jenkins.io/blog/2017/02/01/pipeline-scalability-best-practice/
https://www.cloudbees.com/blog/top-10-best-practices-jenkins-pipeline-plugin
https://github.com/localstack/localstack
https://awspolicygen.s3.amazonaws.com/policygen.html
https://www.pluralsight.com/learn
http://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#spring-cloud-feign-hystrix
http://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.1.1.RELEASE/#_feign
https://docs.spring.io/spring-boot/docs/current/reference/html/index.html
https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-dependency-management
https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-dependency-versions.html
https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html
https://docs.spring.io/spring-boot/docs/current/reference/html/test-auto-configuration.html
https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html
https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html
https://stackoverflow.com/questions/39215533/spring-cloud-config-how-to-use-multiple-configs
https://www-uk.computershare.com/Employee/Login/CompanyIntroduction.aspx?lang=en&issuerid=SCUKIGG&cc=UK
https://regexper.com/
https://httpie.org/doc#querystring-parameters
https://content.pivotal.io/ebooks?utm_source=events
https://rxmarbles.com/#merge
https://web.whatsapp.com/
https://web.telegram.org/#/im
https://devhints.io/httpie
https://scrimba.com/g/glearnreact
https://github.com/shyiko/jabba

open -a /Applications/Google\ Chrome.app --args --disable-web-security --allow-running-insecure-content --user-data-dir=“”

Java APIs

JAX-RS

@Path("/path/{clientId}")
@PUT
ResponseDTO something(
	@PathParam("clientId") String clientId,
	@QueryParam("accountId") String accountId,
	RequestDTO requestDTO);


Spring

@PutMapping("/path/{clientId}")
ResponseDTO something(
	@PathVariable String clientId,
	@RequestParam("accountId") String accountId,
	@RequestBody RequestDTO requestDTO) {


Computer share : C0000226521 : 23952395


Gatling load tester
Apache JMeter
tldr



WIKI COPIES:
Disk Space or Disk Usage commands :

To find the disk space usage of a file system or folders (like /opt or /var) we use "df".
 -h prints the disk usage info in --human readable format.
e.g.  df -h /var or df -h /opt  [You can find the file system folder usage based on the directories you want to check the disk space. Pls refer below screeshot1]
        Screeshot2 gives you the overall usage of /var or /opt.

If you want to know the files which are causing the disk space, we use disk usage command "du".

 e.g. du -sh *    or   du -ah *              [-s is to summarize the disk space taken for a file or folder,   -a will show the disk usage of all the files in the folder/sub folders also.]

You can sort the files as in below screenshot2 to find the highest disk usage file from head to 10.


 If you see files occupying more disk space, Ask Platform Operations team whether logrotate is having any issues on the host. Mainly access.log, localhost.log, application.logs, catalina logs will be logrotated.

 Execute the below commands only if your deliverable is blocked. To nullify the contents of the file to free up a file size. From the above commands if we find a file having more size, we can nullify the file contents using below command. 

  Points to consider before nullifying the contents of a file

a. Which environment you are executing the command?  Don't do this in DEMO/PROD.
b. How important that file contents are? 
c. Whether the file is indexed by splunk or not? 
d. File age?  

          e.g.  cat /dev/null > filename


Thread dump : 
Since we are using Java HotSpot, we will be able to take thread dumps for Java apps only.

Login to the host and "become tomcat'.
If you know the application instance or the app war name. Find the process_id(PID) of the application with the below command :
ps -ef | grep <instance_num> or  ps -ef | grep <instance_num> | grep <app-war-name> 

 If it is high cpu utilization scenario, do top command to find which processid is having the top cpu, memory usage.
 top will give the process_id(PID) which can be used to take thread dumps
 We have to take multiple thread dumps to see the same thread state/scenario in all the thread dumps.
 If we are using jstack, We have to initiate the thread dump command using java path

 Following is the command to take thread dump using Jstack :

     /opt/projects/tomcat/instance_?/jdk/bin/jstack -l <processid> > /path/filename
 
 
e.g. /opt/projects/tomcat/instance_1/jdk/bin/jstack -l 9492 > /tmp/DVS.thread


Thread dumps will not occupy much disk space. It will be in KBs.



Thread dumps are used in situations as few below :

When your application gets stuck/hung - taking thread dumps will help in this scenario
When the JVM/Tomcat threads are piling up heavily. - Thread dumps will tell which thread/code is causing it.
When during high CPU utilization.
When any third party software is causing the application performance issues.
When any DB resources are having hung issues with application.
When taking heap dumps. - Take thread dumps before taking a heap dump.
When response times are way higher than normal SLAs 
........  etc etc


Heap Dump :  
Heap dump is used to analyse the long lived objects occupied in the heap space. it will let us know about the leak suspects and helps us to fix the memory leak issues.

Important Points to note before taking a heap dump since it will pause the application for few seconds :

If the application is critical or not. Take heap dumps for critical apps out of business hours
If the application heap usage is between 80 - 90%. Avoid heap dumps if heap usage is greater than 90% since the app may crash.
Before taking heap dumps we have to take multiple thread dumps since the threads may be related in the heap. Pls follow the above thread dump process.

We can use jmap command to take heap dumps. Following is the command to take heap dumps :



     /opt/projects/tomcat/instance_?/jdk/bin/jmap -dump:format=b,file=<filename> <processid>
 
 
e.g. /opt/projects/tomcat/instance_1/jdk/bin/jmap -dump:format=b,file=/tmp/DVS.hprof 9492


Heap dumps will occupy more disk space, it will be in MBs and GBs. So based on the disk space we need to copy the dump to local and clear the space on the host.


